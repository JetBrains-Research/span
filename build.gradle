import org.apache.tools.ant.filters.ReplaceTokens

// SPAN application version
version = "1.5"

buildscript {
    ext.kotlin_version = "1.6.10"

    repositories {
        maven { url("https://repo1.maven.org/maven2") }
        maven { url("https://plugins.gradle.org/m2") }
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

/* We can't use `plugins` block here because of the multi-root setup, since the `plugins` block doesn't allow
 * specifying a plugin more than once throughout the whole project. */
apply plugin: "application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "kotlin"

mainClassName = "org.jetbrains.bio.span.SpanCLA"

sourceCompatibility = 8
targetCompatibility = sourceCompatibility
compileKotlin { kotlinOptions.jvmTarget = sourceCompatibility }
compileTestKotlin { kotlinOptions.jvmTarget = sourceCompatibility }

if (rootProject == project) {
    repositories {
        maven { url("https://repo1.maven.org/maven2") }
        maven { url("https://plugins.gradle.org/m2") }
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    implementation("org.jetbrains.kotlinx:kotlinx-support-jdk8:0.1")

    // Logging dependencies
    implementation("ch.qos.logback:logback-classic:1.4.12")
    implementation("ch.qos.logback:logback-core:1.4.12")

    compile project(":bioinf-commons")
    testCompile project(path: ":bioinf-commons", configuration: "testOutput")

    testImplementation("junit:junit:4.13.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
}

private String settingsFolder(final String propertyName, final String folderName) {
    if (!System.hasProperty(propertyName)) {
        return "${rootProject.buildDir}/.tests/$folderName"
    } else {
        return System.getProperty(propertyName)
    }
}

test {
    dependsOn ":bioinf-commons:generateTestOrganism"
    dependsOn ":bioinf-commons:test"

    include "**/*Test.class"

    ignoreFailures = true
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "1024m"

    testLogging.showStandardStreams = true

    systemProperty "genomes.path", settingsFolder("genomes.path", "genomes")
    systemProperty "experiments.path", settingsFolder("experiments.path", "experiments")
    systemProperty "raw.data.path", settingsFolder("experiments.path", "rawdata")
    systemProperty "caches.path", settingsFolder("genomes.path", "caches")
    systemProperty "logs.path", settingsFolder("experiments.path", "logs")

    systemProperty "teamcity.build.checkoutDir", System.getProperty("teamcity.build.checkoutDir")
}

task processBuildProperties(type: Copy) {
    shadowJar.dependsOn name

    // turn of cache for this task
    outputs.upToDateWhen { false }

    // Fix version and build in properties file
    from(sourceSets.main.resources) {
        include "span.properties"
    }
    into sourceSets.main.output.resourcesDir
    filter(ReplaceTokens, tokens: [
            VERSION: version,
            BUILD  : project.buildCounter,
            DATE   : new Date().format("MMMM dd, yyyy")
    ])
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

shadowJar {
    // File name: "$baseName-$version-$classifier.jar"
    archiveBaseName.set("span")
    archiveVersion.set("${version}.${project.buildCounter}")
    archiveClassifier.set("")
    zip64 true
    mustRunAfter test
    // umm
    mustRunAfter clean
}

jar {
    manifest {
        attributes provider: "gradle"
        attributes "Application-Name": "SPAN $version"
        attributes "Built-By": "JetBrains Research TeamCity"
    }
}

clean {
    dependsOn ":bioinf-commons:clean"
}

// https://github.com/gradle/gradle/issues/5816
if (rootProject == project) {
    wrapper {
        gradleVersion = "6.8"
    }
}